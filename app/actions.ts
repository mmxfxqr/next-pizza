"use server";

import { prisma } from "@/prisma/prisma-client";
import { OrderDetailsTemplate } from "@/shared/components";
import { VerificationUserTemplate } from "@/shared/components/shared/email-templates/verification-user";
import { TCheckoutFormFields } from "@/shared/constants";
import { sendEmail } from "@/shared/lib";
import { getUserSession } from "@/shared/lib/get-user-session";
import { OrderStatus, Prisma } from "@prisma/client";
import { hashSync } from "bcrypt";
import { cookies } from "next/headers";

export async function createOrder(data: TCheckoutFormFields) {
  try {
    const cookieStore = cookies();
    const cartToken = cookieStore.get("cartToken")?.value;
    if (!cartToken) {
      throw new Error("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
    }

    /* –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ —Ç–æ–∫–µ–Ω—É */
    const userCart = await prisma.cart.findFirst({
      include: {
        user: true,
        items: {
          include: {
            ingredients: true,
            productItem: {
              include: {
                product: true,
              },
            },
          },
        },
      },
      where: {
        token: cartToken,
      },
    });

    /* –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É */
    if (!userCart) {
      throw new Error("–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }

    /* –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É */
    if (userCart?.totalAmount === 0) {
      throw new Error("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞");
    }

    /* –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ */
    const order = await prisma.order.create({
      data: {
        token: cartToken,
        fullName: data.firstName + " " + data.lastName,
        email: data.email,
        phone: data.phone,
        address: data.address,
        comment: data.comment,
        totalAmount: userCart.totalAmount,
        status: OrderStatus.PENDING,
        items: JSON.stringify(userCart.items),
      },
    });

    /* –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É */
    await prisma.cart.update({
      where: {
        id: userCart.id,
      },
      data: {
        totalAmount: 0,
      },
    });

    await prisma.cartItem.deleteMany({
      where: {
        cartId: userCart.id,
      },
    });
    await sendEmail(
      data.email,
      "üìù Taxizza Pizza | –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Ññ" + order.id,
      OrderDetailsTemplate({
        orderId: order.id,
        fullName: order.fullName,
        email: order.email,
        phone: order.phone,
        address: order.address,
        comment: order.comment || "–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
        totalAmount: order.totalAmount,
        items: JSON.parse(order.items?.toString() ?? "[]"),
      })
    );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
    return `/order/${order.id}`;
  } catch (error) {
    console.log("[CREATE ORDER] Server error", error);
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑");
  }
}
export async function updateUserInfo(body: Prisma.UserUpdateInput) {
  try {
    const currentUser = await getUserSession();
    if (!currentUser) {
      throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    const findUser = await prisma.user.findFirst({
      where: {
        id: Number(currentUser.id),
      },
    });

    // –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω, —Ö–µ—à–∏—Ä—É–µ–º –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π
    const updatedPassword = body.password
      ? hashSync(body.password as string, 10)
      : findUser?.password; // –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å

    await prisma.user.update({
      where: {
        id: Number(currentUser.id),
      },
      data: {
        fullName: body.fullName,
        email: body.email,
        password: updatedPassword, // –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –æ–Ω –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è
      },
    });
  } catch (error) {
    console.log("Error [UPDATE_USER_INFO]: ", error);
    throw error;
  }
}
export async function registerUser(body: Prisma.UserCreateInput) {
  try {
    const user = await prisma.user.findFirst({
      where: {
        email: body.email,
      },
    });
    if (user) {
      if (!user.verified) {
        throw new Error("–ü–æ—á—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");
      }
      throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    }
   const createdUser= await prisma.user.create({
      data: {
        fullName: body.fullName,
        email: body.email,
        password: hashSync(body.password, 10),
      },
    });
    const code = Math.floor(100000 + Math.random() * 900000).toString();
    await prisma.verificationCode.create({
      data: {
        code,
        userId: createdUser.id,
      }
    })
    await sendEmail(
      createdUser.email,
      "üìù Taxizza Pizza | –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
      VerificationUserTemplate({
       code,
      })
    );
  } catch (error) {
    console.log("Error {CREATE_USER}: ", error);
    throw error;
  }
}
